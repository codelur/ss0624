package com.cardinal.checkout;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.Month;
import java.time.temporal.TemporalAdjusters;

import com.cardinal.tools.Tool;
import com.cardinal.tools.ToolCharges;

//creates instances of the agreements generated by tool rental
public class RentalAgreement {
	private Tool tool;
	private int rentalDays;
	private LocalDate checkOutDate;
	private LocalDate dueDate;
	private double dailyRentalCharge;
	private int chargeDays;
	//use BigDecimal type for money precision 
	private BigDecimal preDiscountCharge;
	private int discountPercent;
	private BigDecimal discountAmount;
	private BigDecimal finalCharge;
	
	public RentalAgreement(Tool tool, LocalDate checkOutDate, int rentalDays, int discountPercent){	
		this.tool = tool;
		this.rentalDays = rentalDays;
		this.checkOutDate = checkOutDate;
		this.dueDate = checkOutDate.plusDays(rentalDays);
		this.dailyRentalCharge = ToolCharges.valueOf(tool.getToolCode().getToolType()).getDailyCharge();
		this.chargeDays = calculateChargeDays(tool, checkOutDate, dueDate);
		this.preDiscountCharge = BigDecimal.valueOf(dailyRentalCharge * chargeDays)
									.setScale(2,RoundingMode.HALF_UP);
		this.discountPercent = discountPercent;
		this.discountAmount = preDiscountCharge.multiply(BigDecimal.valueOf(discountPercent)).divide(BigDecimal.valueOf(100))
									.setScale(2,RoundingMode.HALF_UP);
		
		this.finalCharge =	preDiscountCharge.subtract(discountAmount).setScale(2,RoundingMode.HALF_UP);	
		
	}
	
	private boolean shouldCharge(LocalDate currentDate) {
		//check if the tool is chargeable on weekdays, or weekends and
		//checks if the date is a holiday and the tool is charged on holidays
		boolean isHoliday = isHoliday(currentDate);
		boolean isWeekend = currentDate.getDayOfWeek() == DayOfWeek.SATURDAY || currentDate.getDayOfWeek() == DayOfWeek.SUNDAY;
		return ((tool.isHolidayCharge() && isHoliday)||
				(!isHoliday && !isWeekend)||
				(tool.isWeekendCharge() && isWeekend));
	}
	
	//calculates the dates of charge for a specific tool from the checkout date to due date
	public int calculateChargeDays(Tool tool, LocalDate checkOutDate, LocalDate dueDate) {
		
		int chargeDays = 0;
		LocalDate currentDate = checkOutDate;
		while(!currentDate.equals(dueDate)) {
			if (shouldCharge(currentDate)) {	
				chargeDays++;
			}
			
			currentDate = currentDate.plusDays(1);
		}
		
		return chargeDays;
	}
	
	public boolean isHoliday(LocalDate currentDate) {
		
		int year = currentDate.getYear();
		LocalDate independenceDay = LocalDate.of(year, Month.JULY, 4);
		
		//if Independence day is on Saturday, the holiday is the day before
		if(independenceDay.getDayOfWeek() == DayOfWeek.SATURDAY)
			independenceDay = independenceDay.minusDays(1);
		
		//if Independence day is on Sunday, the holiday is the day after
		if(independenceDay.getDayOfWeek() == DayOfWeek.SUNDAY)
			independenceDay = independenceDay.plusDays(1);
		
		//adjust the day to get the first Monday in September for the given year
		LocalDate laborDay = LocalDate.of(year, Month.SEPTEMBER, 1)
					.with(TemporalAdjusters.firstInMonth(DayOfWeek.MONDAY));
		
		return currentDate.equals(independenceDay) || currentDate.equals(laborDay);
	}

	@Override
	public String toString() {

		return String.format("Rental Agreement: \n"+
							"Tool Code: %s\n"+
							"Tool type: %s\n"+
							"Tool Brand %s\n"+
							"Rental days: %d\n"+
							"Check out date: %s\n"+
							"Due date: %s\n"+
							"Daily rental charge: $%.2f\n"+
							"Charge days: %d\n"+
							"Pre-discount charge: $%.2f\n"+
							"Discount percent: %d%%\n"+
							"Discount amount: $%.2f\n"+
							"Final charge: $%.2f\n",
							tool.getToolCode(),tool.getToolType(),tool.getBrand(),this.rentalDays,
							this.checkOutDate,this.dueDate,this.dailyRentalCharge,this.chargeDays,
							this.preDiscountCharge,this.discountPercent,this.discountAmount,this.finalCharge);
	}

	public BigDecimal getFinalCharge() {
		return finalCharge;
	}

}
